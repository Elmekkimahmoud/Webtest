{"version":3,"sources":["users-list.js","listcomments.js","posts-list.js","App.js","serviceWorker.js","index.js"],"names":["Userslist","props","DispFunc","setState","display","state","users","axios","get","then","res","data","className","this","map","el","i","key","icon","faUserCircle","name","faEnvelope","email","faPhone","phone","faBuilding","address","city","to","id","onClick","Component","Listcomments","list","console","log","match","params","filter","postId","item","body","Postslist","posts","comments","src","userId","title","DispFun","faCommentDots","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yTAqDeA,E,kDAvCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAYZC,SAAS,WACT,EAAKC,SAAS,CAACC,QAAQ,YAZjB,EAAKC,MAAQ,CAACD,QAAQ,QAASE,MAAM,IAFtB,E,gEAMC,IAAD,OACjBC,IAAMC,IAAI,8CACTC,MAAK,SAAAC,GACJ,EAAKP,SAAS,CAACG,MAAOI,EAAIC,Y,+BAQpB,IAAD,OACL,OACI,iCAEI,yBAAKC,UAAWC,KAAKR,MAAMD,SAC3B,sDACKS,KAAKR,MAAMC,MAAMQ,KAAI,SAACC,EAAIC,GAAL,OAClB,yBAAKC,IAAKD,EAAGJ,UAAU,YAClB,kCAAO,kBAAE,IAAF,CAAkBM,KAAMC,MAA/B,KACD,8BAAOJ,EAAGK,MACV,8BAAM,kBAAE,IAAF,CAAkBF,KAAMG,MAA9B,IAA8CN,EAAGO,OACjD,8BAAM,kBAAE,IAAF,CAAkBJ,KAAMK,MAA9B,IAA2CR,EAAGS,OAC9C,8BAAM,kBAAE,IAAF,CAAkBN,KAAMO,MAA9B,IAA8CV,EAAGW,QAAQC,MACzD,kBAAC,IAAD,CAAMC,GAAE,gBAAWb,EAAGc,KAAtB,IAA6B,4BAAQC,QAAS,EAAK5B,UAAtB,UAA7B,e,GA/BJ6B,aC2BTC,E,kDAjCX,WAAY/B,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CAAE4B,KAAK,IAFL,E,gEAKC,IAAD,OACjB1B,IAAMC,IAAI,iDACTC,MAAK,SAAAC,GACJ,EAAKP,SAAS,CAAC8B,KAAMvB,EAAIC,Y,+BAMnB,IAAD,OAGL,OAFAuB,QAAQC,IAAI,0BACZD,QAAQC,IAAItB,KAAKZ,OAEb,6BAASW,UAAU,eACjB,gFAAmDC,KAAKZ,MAAMmC,MAAMC,OAAOR,GAA3E,KACA,yBAAKjB,UAAU,YACZC,KAAKR,MAAM4B,KAAKK,QAAO,SAAAvB,GAAE,OAAEA,EAAGwB,QAAQ,EAAKtC,MAAMmC,MAAMC,OAAOR,MAAIf,KAAI,SAAC0B,EAAKxB,GAAN,OACvE,yBAAKJ,UAAU,QACb,6CAAgBI,EAAE,EAAlB,MACA,8BAAOwB,EAAKC,gB,GAzBHV,aCgDZW,E,kDA9CX,WAAYzC,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CAAEsC,MAAM,GAAMC,SAAS,IAFrB,E,gEAKC,IAAD,OACjBrC,IAAMC,IAAI,8CACTC,MAAK,SAAAC,GACJ,EAAKP,SAAS,CAACwC,MAAOjC,EAAIC,Y,+BAMpB,IAAD,OAGL,OAFAuB,QAAQC,IAAItB,KAAKZ,OAGb,6BAASW,UAAU,QAEf,yBAAKiC,IAAI,uFACT,kCAAO,kBAAE,IAAF,CAAkB3B,KAAMC,MAA/B,KACA,mEAAsCN,KAAKZ,MAAMmC,MAAMC,OAAOR,IAC9D,yBAAKjB,UAAU,aACVC,KAAKR,MAAMsC,MAAML,QAAO,SAAAvB,GAAE,OAAGA,EAAG+B,QAAQ,EAAK7C,MAAMmC,MAAMC,OAAOR,MAAIf,KAAI,SAACC,EAAGC,GAAJ,OACvE,yBAAKC,IAAKD,EAAGJ,UAAU,aAEnB,yBAAKiC,IAAI,2HACT,8BAAM,kBAAE,IAAF,CAAkB3B,KAAMO,OAC9B,4BAAKV,EAAGgC,OACR,2BAAIhC,EAAG0B,MACP,kBAAC,IAAD,CAAOb,GAAE,gBAAWb,EAAG+B,OAAd,iBAA6B/B,EAAGc,KAAzC,MAAqD,0BAAMC,QAAS,EAAKkB,SAApB,IAA8B,kBAAE,IAAF,CAAkB9B,KAAM+B,MAAtD,YAArD,SAKN,6BACI,kBAAC,IAAD,CAAOC,KAAK,yBAAyBC,UAAWnB,W,GAtChDD,aCgBTqB,MAbf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKxC,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,IAAD,CAAOsC,KAAK,YAAaC,UAAWT,OCJtBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCZNqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.2c7461c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { BrowserRouter as Router,Route, Link } from 'react-router-dom';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {  faUserCircle, faEnvelope, faPhone, faBuilding } from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios' ;\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Userslist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {display:'users', users:[] }\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n      axios.get(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(res=>{\r\n        this.setState({users: res.data})\r\n      })\r\n    }\r\n\r\n  DispFunc=()=>{\r\n  this.setState({display:'hidden'})\r\n  } \r\n\r\n    render() { \r\n        return ( \r\n            <section>\r\n                \r\n                <div className={this.state.display}>\r\n                <h1>This is the users list</h1>\r\n                    {this.state.users.map((el, i)=>\r\n                        <div key={i} className='userinfo'>\r\n                             <span> < FontAwesomeIcon icon={faUserCircle} /> </span>\r\n                            <span>{el.name}</span>\r\n                            <span>< FontAwesomeIcon icon={faEnvelope} /> {el.email}</span>\r\n                            <span>< FontAwesomeIcon icon={faPhone} /> {el.phone}</span>\r\n                            <span>< FontAwesomeIcon icon={faBuilding} /> {el.address.city}</span>\r\n                            <Link to={`/user/${el.id}`}> <button onClick={this.DispFunc}>Follow</button> </Link>\r\n                        </div>    \r\n                    )}\r\n                </div>\r\n            </section>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Userslist;","import React, { Component } from 'react';\r\nimport axios from 'axios' ;\r\n\r\n\r\n\r\n\r\nclass Listcomments extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { list:[]  }\r\n    }\r\n\r\n    componentDidMount(){\r\n      axios.get(\"https://jsonplaceholder.typicode.com/comments\")\r\n      .then(res=>{\r\n        this.setState({list: res.data})\r\n      })\r\n    }\r\n\r\n\r\n\r\n    render() { \r\n        console.log(\"hello listcommentaires\")\r\n        console.log(this.props)\r\n        return ( \r\n            <section className=\"listcomment\">\r\n              <h1>This is the different comments of the post N° {this.props.match.params.id} </h1>\r\n              <div className=\"comments\">\r\n                {this.state.list.filter(el=>el.postId==this.props.match.params.id).map((item,i)=> \r\n                <div className=\"item\">\r\n                  <h4> Comment N°{i+1}: </h4>\r\n                  <span>{item.body}</span>\r\n                </div>\r\n                  )}\r\n              </div>\r\n            </section>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Listcomments;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {  faUserCircle, faBuilding, faCommentDots } from '@fortawesome/free-solid-svg-icons'\r\nimport { BrowserRouter as Router, Route,Link } from 'react-router-dom';\r\nimport Listcomments from './listcomments';\r\nimport axios from 'axios' ;\r\n\r\nclass Postslist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { posts:[ ] , comments:[] }\r\n    }\r\n\r\n    componentDidMount(){\r\n      axios.get(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then(res=>{\r\n        this.setState({posts: res.data})\r\n      })\r\n    }\r\n\r\n    \r\n\r\n    render() { \r\n        console.log(this.props)\r\n    \r\n        return ( \r\n            <section className='post'>\r\n                \r\n                <img src='https://www.ricoh.fr/media/Future%20of%20Work%20-%20Topic%20Banner_tcm79-36228.png' />\r\n                <span> < FontAwesomeIcon icon={faUserCircle} /> </span>\r\n                <h1>This is the post list of user N° {this.props.match.params.id}</h1>\r\n                <div className='listposts'>\r\n                    {this.state.posts.filter(el=> el.userId==this.props.match.params.id).map((el,i)=>\r\n                      <div key={i} className='postsuser' >\r\n                          \r\n                          <img src='https://sparkup.app/wp-content/uploads/2018/08/re%CC%81union-jeunes-managers_re%CC%81duit-3017840545-1535709036220.jpg'  />\r\n                          <span>< FontAwesomeIcon icon={faBuilding} /></span>\r\n                          <h4>{el.title}</h4>\r\n                          <p>{el.body}</p>\r\n                          <Link  to={`/user/${el.userId}/post/${el.id}`}   >   <span onClick={this.DispFun}> < FontAwesomeIcon icon={faCommentDots} />Comments</span> </Link>\r\n\r\n                      </div>\r\n                    \r\n                    )}\r\n                    <div>\r\n                        <Route path=\"/user/:userId/post/:id\" component={Listcomments} />\r\n                    </div>\r\n                </div>\r\n                \r\n            </section>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Postslist;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, link} from 'react-router-dom';\n\nimport Userslist from './users-list';\nimport Postslist from './posts-list';\n\n\n\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <Userslist/>\n     \n      <Route path='/user/:id'  component={Postslist} />\n    \n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}